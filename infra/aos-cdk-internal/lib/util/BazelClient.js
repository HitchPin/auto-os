"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BazelError = exports.BazelClient = exports.verifyVersion = void 0;
const p = require("child_process");
const BazelError_1 = require("./BazelError");
Object.defineProperty(exports, "BazelError", { enumerable: true, get: function () { return BazelError_1.BazelError; } });
const getExecOutput = (cmd, op) => {
    try {
        return p.execSync(cmd, {
            ...op,
            stdio: 'pipe'
        }).toString().trim();
    }
    catch (err) {
        throw new BazelError_1.BazelError("ExecutionError", "Could not execute query.", err);
    }
};
const verifyVersion = (ps) => {
    try {
        return getExecOutput(`${ps} --version`).toString().trim();
    }
    catch (err) {
        throw new Error("Unable to find a valid Bazel installation.");
    }
};
exports.verifyVersion = verifyVersion;
const getWorkspaceRoot = (bazelCmd, cwd) => {
    try {
        return getExecOutput(`${bazelCmd} info workspace`, cwd ? { cwd: cwd, encoding: 'utf8' } : { encoding: 'utf8' }).toString().trim();
    }
    catch (err) {
        throw new Error("Unable to find a valid Bazel workspace root.");
    }
};
const OUTPUT_ARTIFACT_QUERY = `target.files.to_list()[0].path`;
class BazelClient {
    constructor(bazelPath, workspaceRoot) {
        this.artifactOf = (pkg, target) => this.starlarkCquery(pkg, target, OUTPUT_ARTIFACT_QUERY);
        this.starlarkCquery = (pkg, target, starlarkExpression) => {
            const args = `cquery ${pkg}:${target} --output=starlark --starlark:expr='${starlarkExpression}'`;
            return this.bzl(args);
        };
        this.query = (packagePath, target, queryFormat) => {
            return this.bzl(`query ${packagePath}:${target} --output ${queryFormat}`);
        };
        const bazel = bazelPath ?? "bazel";
        verifyVersion(bazel);
        this.bazelPath = bazel;
        this.workspaceRoot = workspaceRoot ?? getWorkspaceRoot(bazel);
    }
    get infoKeys() {
        const output = this.bzl("info");
        const lines = output.split("\n");
        const m = new Map();
        lines.forEach((l) => {
            const fc = l.indexOf(":");
            const k = l.substring(0, fc);
            const v = l.substring(fc + 1).trim();
            m.set(k, v);
        });
        return m;
    }
    bzl(args) {
        return getExecOutput(`${this.bazelPath} ${args}`, {
            cwd: this.workspaceRoot,
            encoding: "utf8",
        });
    }
    static create(bazelPath, workspaceRoot) {
        const bazel = bazelPath ?? "bazel";
        verifyVersion(bazel);
        const wsRoot = workspaceRoot ?? getWorkspaceRoot(bazel);
        return new BazelClient(bazel, wsRoot);
    }
}
exports.BazelClient = BazelClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmF6ZWxDbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJCYXplbENsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBbUM7QUFFbkMsNkNBQXlDO0FBZ0hKLDJGQWhINUIsdUJBQVUsT0FnSDRCO0FBeEYvQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFzQyxFQUFFLEVBQUU7SUFDNUUsSUFBSSxDQUFDO1FBQ0gsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNyQixHQUFHLEVBQUU7WUFDTCxLQUFLLEVBQUUsTUFBTTtTQUNkLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLE1BQU0sSUFBSSx1QkFBVSxDQUFDLGdCQUFnQixFQUFFLDBCQUEwQixFQUFFLEdBQVksQ0FBQyxDQUFDO0lBQ25GLENBQUM7QUFDSCxDQUFDLENBQUM7QUFDRixNQUFNLGFBQWEsR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFFO0lBQ2pDLElBQUksQ0FBQztRQUNELE9BQU8sYUFBYSxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5RCxDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQTtJQUNqRSxDQUFDO0FBQ0wsQ0FBQyxDQUFBO0FBd0VRLHNDQUFhO0FBdEV0QixNQUFNLGdCQUFnQixHQUFHLENBQUMsUUFBZ0IsRUFBRSxHQUFZLEVBQUUsRUFBRTtJQUN4RCxJQUFJLENBQUM7UUFDSCxPQUFPLGFBQWEsQ0FBQyxHQUFHLFFBQVEsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFB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QUM7Q0FDRjtBQUd1QixrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHAgZnJvbSBcImNoaWxkX3Byb2Nlc3NcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBCYXplbEVycm9yIH0gZnJvbSAnLi9CYXplbEVycm9yJ1xuaW1wb3J0IHR5cGUgeyBFeGVjU3luY09wdGlvbnNXaXRoU3RyaW5nRW5jb2RpbmcgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxudHlwZSBRdWVyeU91dHB1dFR5cGUgPSB8XG4gICdsYWJlbCcgfFxuICAnbGFiZWxfa2luZCcgfFxuICAnYnVpbGQnIHxcbiAgJ21pbnJhbmsnIHxcbiAgJ21heHJhbmsnIHxcbiAgJ3BhY2thZ2UnIHxcbiAgJ2xvY2F0aW9uJyB8IFxuICAnZ3JhcGgnIHxcbiAgJ3htbCcgfFxuICAncHJvdG8nIHxcbiAgJ3N0cmVhbWVkX2pzb25wcm90bycgfFxuICAnc3RyZWFtZWRfcHJvdG8nO1xuXG5pbnRlcmZhY2UgQmF6ZWxQYXRoUHJvcHMge1xuICAgIGN1c3RvbUJhemVsUGF0aD86IHN0cmluZyxcbiAgICB3b3Jrc3BhY2VSb290Pzogc3RyaW5nLFxuICAgIHBhY2thZ2VOYW1lOiBzdHJpbmcsXG4gICAgdGFyZ2V0Pzogc3RyaW5nXG59XG5cbmNvbnN0IGdldEV4ZWNPdXRwdXQgPSAoY21kOiBzdHJpbmcsIG9wPzogRXhlY1N5bmNPcHRpb25zV2l0aFN0cmluZ0VuY29kaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHAuZXhlY1N5bmMoY21kLCB7XG4gICAgICAuLi5vcCxcbiAgICAgIHN0ZGlvOiAncGlwZSdcbiAgICB9KS50b1N0cmluZygpLnRyaW0oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEJhemVsRXJyb3IoXCJFeGVjdXRpb25FcnJvclwiLCBcIkNvdWxkIG5vdCBleGVjdXRlIHF1ZXJ5LlwiLCBlcnIgYXMgRXJyb3IpO1xuICB9XG59O1xuY29uc3QgdmVyaWZ5VmVyc2lvbiA9IChwczogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGdldEV4ZWNPdXRwdXQoYCR7cHN9IC0tdmVyc2lvbmApLnRvU3RyaW5nKCkudHJpbSgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZmluZCBhIHZhbGlkIEJhemVsIGluc3RhbGxhdGlvbi5cIilcbiAgICB9XG59XG5cbmNvbnN0IGdldFdvcmtzcGFjZVJvb3QgPSAoYmF6ZWxDbWQ6IHN0cmluZywgY3dkPzogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBnZXRFeGVjT3V0cHV0KGAke2JhemVsQ21kfSBpbmZvIHdvcmtzcGFjZWAsIGN3ZCA/IHsgY3dkOiBjd2QhLCBlbmNvZGluZzogJ3V0ZjgnIH0gOiB7IGVuY29kaW5nOiAndXRmOCcgfSkudG9TdHJpbmcoKS50cmltKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gZmluZCBhIHZhbGlkIEJhemVsIHdvcmtzcGFjZSByb290LlwiKTtcbiAgICB9XG59XG5cbmNvbnN0IE9VVFBVVF9BUlRJRkFDVF9RVUVSWSA9IGB0YXJnZXQuZmlsZXMudG9fbGlzdCgpWzBdLnBhdGhgO1xuXG5jbGFzcyBCYXplbENsaWVudCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgYmF6ZWxQYXRoOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgd29ya3NwYWNlUm9vdDogc3RyaW5nO1xuICBjb25zdHJ1Y3RvcihiYXplbFBhdGg/OiBzdHJpbmcsIHdvcmtzcGFjZVJvb3Q/OiBzdHJpbmcpIHtcbiAgICBjb25zdCBiYXplbCA9IGJhemVsUGF0aCA/PyBcImJhemVsXCI7XG4gICAgdmVyaWZ5VmVyc2lvbihiYXplbCk7XG4gICAgdGhpcy5iYXplbFBhdGggPSBiYXplbDtcbiAgICB0aGlzLndvcmtzcGFjZVJvb3QgPSB3b3Jrc3BhY2VSb290ID8/IGdldFdvcmtzcGFjZVJvb3QoYmF6ZWwpO1xuICB9XG5cbiAgZ2V0IGluZm9LZXlzKCk6IE1hcDxzdHJpbmcsIHN0cmluZz4ge1xuICAgIGNvbnN0IG91dHB1dCA9IHRoaXMuYnpsKFwiaW5mb1wiKTtcbiAgICBjb25zdCBsaW5lcyA9IG91dHB1dC5zcGxpdChcIlxcblwiKTtcbiAgICBjb25zdCBtID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcbiAgICBsaW5lcy5mb3JFYWNoKChsKSA9PiB7XG4gICAgICBjb25zdCBmYyA9IGwuaW5kZXhPZihcIjpcIik7XG4gICAgICBjb25zdCBrID0gbC5zdWJzdHJpbmcoMCwgZmMpO1xuICAgICAgY29uc3QgdiA9IGwuc3Vic3RyaW5nKGZjICsgMSkudHJpbSgpO1xuICAgICAgbS5zZXQoaywgdik7XG4gICAgfSk7XG4gICAgcmV0dXJuIG07XG4gIH1cblxuICBhcnRpZmFjdE9mID0gKHBrZzogc3RyaW5nLCB0YXJnZXQ6IHN0cmluZykgPT5cbiAgICB0aGlzLnN0YXJsYXJrQ3F1ZXJ5KHBrZywgdGFyZ2V0LCBPVVRQVVRfQVJUSUZBQ1RfUVVFUlkpO1xuXG4gIHN0YXJsYXJrQ3F1ZXJ5ID0gKFxuICAgIHBrZzogc3RyaW5nLFxuICAgIHRhcmdldDogc3RyaW5nLFxuICAgIHN0YXJsYXJrRXhwcmVzc2lvbjogc3RyaW5nXG4gICk6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgYXJncyA9IGBjcXVlcnkgJHtwa2d9OiR7dGFyZ2V0fSAtLW91dHB1dD1zdGFybGFyayAtLXN0YXJsYXJrOmV4cHI9JyR7c3RhcmxhcmtFeHByZXNzaW9ufSdgO1xuICAgIHJldHVybiB0aGlzLmJ6bChhcmdzKTtcbiAgfTtcblxuICBxdWVyeSA9IChcbiAgICBwYWNrYWdlUGF0aDogc3RyaW5nLFxuICAgIHRhcmdldDogc3RyaW5nLFxuICAgIHF1ZXJ5Rm9ybWF0OiBRdWVyeU91dHB1dFR5cGVcbiAgKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gdGhpcy5iemwoYHF1ZXJ5ICR7cGFja2FnZVBhdGh9OiR7dGFyZ2V0fSAtLW91dHB1dCAke3F1ZXJ5Rm9ybWF0fWApO1xuICB9O1xuXG4gIHByaXZhdGUgYnpsKGFyZ3M6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGdldEV4ZWNPdXRwdXQoYCR7dGhpcy5iYXplbFBhdGh9ICR7YXJnc31gLCB7XG4gICAgICBjd2Q6IHRoaXMud29ya3NwYWNlUm9vdCxcbiAgICAgIGVuY29kaW5nOiBcInV0ZjhcIixcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUoYmF6ZWxQYXRoPzogc3RyaW5nLCB3b3Jrc3BhY2VSb290Pzogc3RyaW5nKTogQmF6ZWxDbGllbnQge1xuICAgIGNvbnN0IGJhemVsID0gYmF6ZWxQYXRoID8/IFwiYmF6ZWxcIjtcbiAgICB2ZXJpZnlWZXJzaW9uKGJhemVsKTtcblxuICAgIGNvbnN0IHdzUm9vdCA9IHdvcmtzcGFjZVJvb3QgPz8gZ2V0V29ya3NwYWNlUm9vdChiYXplbCk7XG4gICAgcmV0dXJuIG5ldyBCYXplbENsaWVudChiYXplbCwgd3NSb290KTtcbiAgfVxufVxuXG5cbmV4cG9ydCB7IHZlcmlmeVZlcnNpb24sIEJhemVsQ2xpZW50LCBCYXplbEVycm9yfTsiXX0=