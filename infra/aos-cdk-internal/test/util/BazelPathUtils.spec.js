"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bp = require("../../lib/util/BazelClient");
describe('BazelPathUtils', () => {
    test('Accurately validates when bazel exists.', () => {
        bp.verifyVersion('bazel');
    });
    test("Accurately identifies when bazel does not exist.", () => {
        let error = undefined;
        try {
            bp.verifyVersion("bazela");
        }
        catch (err) {
            error = err;
        }
        expect(error).toBeDefined();
    });
});
describe('BazelQuery', () => {
    const bq = bp.BazelClient.create();
    test('Gets info keys', () => {
        const ws = bq.infoKeys.get("workspace");
        expect(ws?.endsWith('project-maestro')).toBeTruthy();
    });
    test("Executes starlark cquery", () => {
        const lambdaOutput = bq.starlarkCquery('//maestro/lambda', 'lambda', 'target.files.to_list()[0].path');
        expect(lambdaOutput).toBe("bazel-out/darwin_arm64-fastbuild/bin/maestro/lambda/package.zip");
    });
    test("Finds package target output artifacts", () => {
        const lambdaOutput = bq.artifactOf('//maestro/lambda', 'lambda');
        expect(lambdaOutput).toBe("bazel-out/darwin_arm64-fastbuild/bin/maestro/lambda/package.zip");
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmF6ZWxQYXRoVXRpbHMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkJhemVsUGF0aFV0aWxzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBaUQ7QUFFakQsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUU1QixJQUFJLENBQUMseUNBQXlDLEVBQUUsR0FBRyxFQUFFO1FBQ2pELEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDSCxJQUFJLENBQUMsa0RBQWtELEVBQUUsR0FBRyxFQUFFO1FBQzFELElBQUksS0FBSyxHQUFzQixTQUFTLENBQUM7UUFDekMsSUFBSSxDQUFDO1lBQ0QsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMvQixDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNYLEtBQUssR0FBRyxHQUFZLENBQUM7UUFDekIsQ0FBQztRQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFBO0FBRUYsUUFBUSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFFeEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUVuQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO1FBQ3hCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN6RCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7UUFDcEMsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FDcEMsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLGdDQUFnQyxDQUMvRCxDQUFDO1FBQ0YsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FDdkIsaUVBQWlFLENBQ2xFLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7UUFDL0MsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNqRSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUN2QixpRUFBaUUsQ0FDbEUsQ0FBQztJQUNOLENBQUMsQ0FBQyxDQUFDO0FBRVAsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBicCBmcm9tICcuLi8uLi9saWIvdXRpbC9CYXplbENsaWVudCc7XG5cbmRlc2NyaWJlKCdCYXplbFBhdGhVdGlscycsICgpID0+IHtcblxuICAgIHRlc3QoJ0FjY3VyYXRlbHkgdmFsaWRhdGVzIHdoZW4gYmF6ZWwgZXhpc3RzLicsICgpID0+IHtcbiAgICAgICAgYnAudmVyaWZ5VmVyc2lvbignYmF6ZWwnKTtcbiAgICB9KTtcbiAgICB0ZXN0KFwiQWNjdXJhdGVseSBpZGVudGlmaWVzIHdoZW4gYmF6ZWwgZG9lcyBub3QgZXhpc3QuXCIsICgpID0+IHtcbiAgICAgICAgbGV0IGVycm9yOiBFcnJvciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGJwLnZlcmlmeVZlcnNpb24oXCJiYXplbGFcIik7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZXJyb3IgPSBlcnIgYXMgRXJyb3I7XG4gICAgICAgIH0gXG4gICAgICAgIFxuICAgICAgICBleHBlY3QoZXJyb3IpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG59KVxuXG5kZXNjcmliZSgnQmF6ZWxRdWVyeScsICgpID0+IHtcblxuICAgIGNvbnN0IGJxID0gYnAuQmF6ZWxDbGllbnQuY3JlYXRlKCk7XG5cbiAgICB0ZXN0KCdHZXRzIGluZm8ga2V5cycsICgpID0+IHtcbiAgICAgICAgY29uc3Qgd3MgPSBicS5pbmZvS2V5cy5nZXQoXCJ3b3Jrc3BhY2VcIik7XG4gICAgICAgIGV4cGVjdCh3cz8uZW5kc1dpdGgoJ3Byb2plY3QtbWFlc3RybycpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KFwiRXhlY3V0ZXMgc3RhcmxhcmsgY3F1ZXJ5XCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGxhbWJkYU91dHB1dCA9IGJxLnN0YXJsYXJrQ3F1ZXJ5KFxuICAgICAgICAnLy9tYWVzdHJvL2xhbWJkYScsICdsYW1iZGEnLCAndGFyZ2V0LmZpbGVzLnRvX2xpc3QoKVswXS5wYXRoJ1xuICAgICAgKTtcbiAgICAgIGV4cGVjdChsYW1iZGFPdXRwdXQpLnRvQmUoXG4gICAgICAgIFwiYmF6ZWwtb3V0L2Rhcndpbl9hcm02NC1mYXN0YnVpbGQvYmluL21hZXN0cm8vbGFtYmRhL3BhY2thZ2UuemlwXCJcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KFwiRmluZHMgcGFja2FnZSB0YXJnZXQgb3V0cHV0IGFydGlmYWN0c1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGxhbWJkYU91dHB1dCA9IGJxLmFydGlmYWN0T2YoJy8vbWFlc3Ryby9sYW1iZGEnLCAnbGFtYmRhJyk7XG4gICAgICAgIGV4cGVjdChsYW1iZGFPdXRwdXQpLnRvQmUoXG4gICAgICAgICAgXCJiYXplbC1vdXQvZGFyd2luX2FybTY0LWZhc3RidWlsZC9iaW4vbWFlc3Ryby9sYW1iZGEvcGFja2FnZS56aXBcIlxuICAgICAgICApO1xuICAgIH0pO1xuXG59KTsiXX0=