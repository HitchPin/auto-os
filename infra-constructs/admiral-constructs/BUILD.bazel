load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("@npm//:defs.bzl", "npm_link_all_packages")

npm_link_all_packages(name = "node_modules")

SRC_PATTERNS = [
    "package.json",
    "src/**/*.ts",
]

TEST_PATTERNS = [
    "test/**/*.spec.ts",
]

SOURCES = glob(
    include = SRC_PATTERNS,
    allow_empty = True,
    exclude = TEST_PATTERNS,
)

filegroup(
    name = "assets",
    srcs = [
        "src/internal/delegated_admin.py",
        "src/internal/trusted_svc_enabler.py",
        "//providers/cluster-tls/rootca-cfn-resource:resourceProvider",
        "//providers/cluster-tls/rootca-cfn-resource:resourceRoleStack",
        "//providers/cluster-tls/lbcert-cfn-resource:resourceProvider",
        "//providers/cluster-tls/lbcert-cfn-resource:resourceRoleStack",
    ],
)

ts_project(
    name = "pkg",
    srcs = SOURCES,
    assets = [
        ":assets",
    ],
    data = [
        ":node_modules/aws-cdk-lib",
    ],
    declaration = True,
    declaration_dir = "dist",
    out_dir = "dist",
    root_dir = "src",
    transpiler = "tsc",
    visibility = ["//visibility:public"],
    deps = [
        ":node_modules/@types/node",
        ":node_modules/@types/yargs",
        ":node_modules/aws-cdk-lib",
        ":node_modules/constructs",
        ":node_modules/typescript",
        "//infra-constructs/aos-internal-constructs:pkg",
        "//infra-constructs/aos-ami-constructs:pkg",
    ],
)
